
plugins {
    id "org.flywaydb.flyway" version "5.2.4"
}

configurations {
    querydslsql {
        extendsFrom runtime
    }
    hibernate {
        extendsFrom runtime
    }
}

ext {
    h2DbFolder = "${projectDir}/db/sampledb"
    jdbcUrl = "jdbc:h2:${h2DbFolder}"
    jdbcUser = 'h2'
    jdbcPassword = 'h2'
    schema = 'PUBLIC'
    queryDslPackageName = "${project.group.toString().replace('-', '.')}.${project.name.toString().replace('-', '.')}.generated.querydsl"
    queryDslTargetFolder = "${sourceSets.main.java.srcDirs[0]}"
    hibernatePackageName = "${project.group.toString().replace('-', '.')}.${project.name.toString().replace('-', '.')}.generated.hibernate"
    hibernateTargetFolder = "${sourceSets.main.java.srcDirs[0]}"
}

flyway {
    url = jdbcUrl
    user = jdbcUser
    password = jdbcPassword
    locations = [ "filesystem:${projectDir}/src/main/resources/sampledb/db/migration/h2" ]
    initSql = 'create schema if not exists FLYWAY'
    schemas = [ 'FLYWAY', schema ]
}

dependencies {
    compile "com.h2database:h2:${h2Version}"
    compile "com.querydsl:querydsl-sql:${queryDslVersion}"
    compile "javax.annotation:javax.annotation-api:${annotationApiVersion}"
    compile "org.hibernate:hibernate-core:${hibernateVersion}"

    testCompile "org.flywaydb:flyway-core:${flywayVersion}"

    querydslsql "com.querydsl:querydsl-sql-codegen:${queryDslVersion}"

    hibernate "org.hibernate:hibernate-tools:${hibernateVersion}"
}

tasks.flywayMigrate.doFirst {
    println "delete ${h2DbFolder}"
    println file(h2DbFolder).parentFile.deleteDir()
}

task generateQueryDsl(dependsOn: [ 'cleanGeneratedQueryDsl', 'flywayMigrate' ]) {
    doLast {
        def props = [
                jdbcDriver    : 'org.h2.Driver',
                jdbcUrl       : jdbcUrl,
                jdbcUser      : jdbcUser,
                jdbcPassword  : jdbcPassword,
                packageName   : queryDslPackageName,
                targetFolder  : queryDslTargetFolder,
                schemaPattern : schema
        ]
        ant.taskdef(
                name      : 'generateQueryDSL',
                classname : 'com.querydsl.sql.codegen.ant.AntMetaDataExporter',
                classpath : configurations.querydslsql.asPath
        )
        ant.generateQueryDSL(props)
    }
}

task cleanGeneratedQueryDsl {
    doLast {
        file("${queryDslTargetFolder}/${queryDslPackageName.replace('.', '/')}").deleteDir()
    }
}

task generateHibernate(dependsOn: [ 'cleanGeneratedHibernate', 'flywayMigrate' ]) {
    doLast {
        ant.taskdef(
                name      : 'hibernatetool',
                classname : 'org.hibernate.tool.ant.HibernateToolTask',
                classpath : configurations.hibernate.asPath
        )
        ant.hibernatetool(destdir: "${hibernateTargetFolder}") {
            jdbcconfiguration(
                    propertyfile: "${projectDir}/hibernate.properties",
                    packagename: hibernatePackageName,
                    revengfile: "${projectDir}/hibernate.reveng.xml"
            ){}
            hbm2java(jdk5: 'true', ejb3: 'true') {}
        }
    }
}

task cleanGeneratedHibernate {
    doLast {
        file("${hibernateTargetFolder}/${hibernatePackageName.replace('.', '/')}").deleteDir()
    }
}

tasks.clean.dependsOn cleanGeneratedQueryDsl
tasks.clean.dependsOn cleanGeneratedHibernate
